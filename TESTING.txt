Testing
=======

Input file format
-----------------

    One input per line, where each input is a tuple of the form:
    (X, n, r, s) (the parentheses are optional), where

        - $X_n^{(r)}$ is an affine Lie algebra, and

        - $s = (s_0, \dots, s_l)$ specifies the dominant integral
          highest weight $\lambda$ of a standard module for
          $X_n^{(r)}$, where
          $$ \lambda = s_0 \Lambda_0 + \dots s_l \Lambda_l. $$

    In addition, blank lines and lines starting with a `#` is
    ignored.

Output file format
------------------

    One output per line, where each output is of the form:
    (c, m) (the parentheses are optional), where

        - $c = [c_1, \dots, c_m]$ is a list of m integers

    specifying the principal specialization of the character formula
    for the vacuum space of the standard module with highest weight
    $\lambda$ of the affine Kac-Moody Lie algebra $X_n^{(r)}$:

        $$ \prod_{k \ge 0} \prod_{i=1}^m (1 - q^{mk+i})^{c_i}, $$

    where $q$ is a formal variable.

    In addition, blank lines and lines starting with a `#` is
    ignored.

Test cases
----------

    There are 12 test cases, as determined by the algorithm.  These
    corresponds to

        * (7 cases) X = A, B, C, D, E, F or G
                    r = 1

        * (2 cases) X = A
                    r = 2
                    n = even or odd

        * (2 cases) X = D or E
                    r = 2

        * (1 cases) X = D
                    r = 3.

Program to assist with testing
------------------------------

    check.py
        Check integrity of an output file, or compare two output
        files to see if the outputs are the same.

    genRandInputs.py
        Generate random inputs, N for each of the above 12 test
        cases. Run 'python genRandInputs.py -h' for details.
        (Python 2.7)

    run.mw
        Run a maple script on inputs from an input file and write
        the resulting outputs on an output file.  (Maple worksheet)

    run.py
        Run a python script on inputs from an input file and write
        the resulting outputs on an output file.  (Python 2.7)

    stdcp.py
        Read an output file and then write it back to the stdout in
        standardized form (i.e., spaces are consistent between comma,
        etc.).  More specifically, blank lines and lines starting
        with a `#` are echoed to stdout.  Other lines are read as
        python expressions, and then written back to the stdout.

Input and output files
----------------------

    Bos-charform-outputs
        Output file generated by `run.mw` using
        `Bos-charform-freeze.mpl`.

    inputs
        File containing random inputs -- 5 for each of the 12 cases
        as distinguised by the algorithm -- total 60, generated by
        genRandInputs.py.

    maple-orig-outputs
        Output file generated in the maple worksheet
        `charform-orig-tests.mw` on the inputs from the input file
        `inputs`.  The results are hand-copied, and passed through
        `stdcp.py`.  This is the benchmark output file against which
        other output files are compared for correctness.
